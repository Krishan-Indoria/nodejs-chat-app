</body>
<script>
    // peerjs --port 9000 --key peerjs

    var isModalOpen = false;
    var myStream = null;
    var myCall = null;
    var current_user = null;
    var currentId = null;
    var online_user_list = [];
    var socket_list = [];
    var peers = {};
    var peer = new Peer(undefined, {
        host: '/',
        port: '9000',
    });

    var getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
    var img_upload_btn = document.getElementById('img-upload');
    var file_upload_btn = document.getElementById('file-upload');
    var file_el = document.getElementById('file-upload-input');
    var file_el_other = document.getElementById('file-upload-input_other');
    var video_btn_el =  document.getElementById('video_call_button');
    var videoGrid =  document.getElementById('video_grid');
    var video_el =  document.createElement('video');
    var close_call_btn = document.getElementById('close_call');
    var make_call_btn = document.getElementById('make_call_btn');

    function handleLoad() {
        var token = localStorage.getItem('token');
        const socket = io({
            auth: {
                token
            }
        });
        window.socket = socket;
        console.log('socket', socket);

        
        // socket.on('user:list:resp', (users) => {
        //     console.log('users 2', users);
        //     try {
        //         users.forEach(user => {
        //             append_user(user._id, user.name, user.username, user.image) // user.image
        //         });
        //     } catch {}
        // })

        setTimeout(() => {
            if(!socket.connected) {
                window.location.href = "/login"
            }
            else {
                loadUsers(socket)
            }
        }, 1200);
        

        socket.on('user:profile', (user) => {
            current_user = user;
            try {
                document.getElementById('user-name').innerText = user.username
                profile_body(user.name, user.username, user.image, user.createdAt);
            } catch {}
            return;
        })

        socket.on('connect_error', err => handleErrors(err, 'connect_error'))
        socket.on('connect_failed', err => console.log(err, 'connect_failed'))
        socket.on('disconnect', err => console.log(err, 'disconnect'))

        socket.on('another:connect', old_socket => {
            console.log('another connected', socket.id, old_socket);
            socket.id == old_socket && socket.disconnect();
            Toastify({
                text: 'Same User login elsewhere',
                duration: 5000,
                position: "center"
                }).showToast();
        })

        socket.on('new:user', user => {
            user && append_user(user._id, user.name, user.username, user.image);
        });

        socket.on('user-connected', userId => {
            console.log('user connected', userId);
            document.getElementById('online_' + userId).classList.add('bg-title')
            document.getElementById('online_' + userId).classList.add('shadow-md')
            document.getElementById('online_' + userId).classList.add('shadow-title')
        })

        socket.on('user-disconnected', userId => {
            console.log('user disconnected', userId);
            if(peers[userId]) {
                peers[userId].close();
            }
            var _user = online_user_list.find(s => s.userId == userId)
            if(_user && userId == currentId) {
                (!video_btn_el.classList.contains('hidden')) && video_btn_el.classList.add('hidden')
            }
            document.getElementById('online_' + userId).classList.remove('bg-title')
            document.getElementById('online_' + userId).classList.remove('shadow-md')
            document.getElementById('online_' + userId).classList.remove('shadow-title')
        })


        socket.on('message:received', msg_obj => {
            if(currentId == msg_obj.senderId) {
                if(msg_obj.msg_type == "message") {
                    append_message('receive', currentId, msg_obj.message, msg_obj.image)
                }
                else {
                    append_message('receive', currentId, msg_obj.message, msg_obj.image, msg_obj.msg_type)
                }
                var msg_box = document.getElementById('chat-messages');
                msg_box.scrollTo(0, msg_box.scrollHeight);
            }
            else {
                Toastify({
                text: msg_obj.senderName + ' send you a message',
                duration: 3000,
                onClick: () => getUserChat(msg_obj.senderId)
                }).showToast();
            }
        })


        socket.on('user:current:online', user_socket_list => {
            online_user_list = [];
            online_user_list = [...user_socket_list];
            setTimeout(() => {
            for(let i = 0; i < user_socket_list.length; i++) {
                var online_el =  document.getElementById('online_' + user_socket_list[i].userId);
                var el = online_el?.classList;
                if(online_el && !el.contains('bg-title')) {
                    el.add('bg-title');
                    el.add('shadow-md');
                    el.add('shadow-title');
                }
            }
            }, 1000)
        })

        // socket.on('peer:newId', (obj) => {
        //     console.log('new peer user', obj);
        //     socket_list.unshift(obj);
        // })

        socket.on('req:peer:id', (cb) => {
            console.log('req-peer-id', peer.id);
            cb(peer.id);
        })

        socket.on('connect',() => {
            console.log('connected to server');
        })
        socket.on('disconnect',() => {
            console.log('disconnected from server');
        })

        // socket.on('user-disconnect', userId => {
        //     console.log('user-disconnect', userId);
        //     peers[userId].close();
        // })

        
        
    }

    function loadUsers(_socket) {
        var user_box = document.getElementById('chat-users');
        user_box.innerHTML = '<div class="loader m-auto mt-12"></div>'

        _socket.emit("user:list", (users) => {
            user_box.innerHTML = '';

            users.forEach(user => {
                append_user(user._id, user.name, user.username, user.image) // user.image
            });
            document.querySelectorAll('img').forEach(el => {
                new Viewer(el)
            })
        });
    }

    window.addEventListener('load', () => {
        // const gallery = new Viewer(document.querySelectorAll('img'));
        
        // setTimeout(() => {
        //     loadUsers();
        // }, 500);

        document.getElementById('logout-btn').addEventListener('click', () => {
            localStorage.clear();
            window.location.href = '/login'
        })

        file_upload_btn.addEventListener('click', () => {
            file_el_other.click();
        })

        img_upload_btn.addEventListener('click', () => {
            file_el.click();
        })

        file_el.addEventListener('change', (e) => {
            var img = e.target.files[0];
            if(img.size/1024 > 2000) {
                Toastify({
                text: 'Max Image Size 2MB',
                duration: 3000,
                }).showToast();
                return;
            }
            var form_data = new FormData();
            form_data.append('image', img);
            fetch('/api/image-upload', {method: "POST", body: form_data})
            .then(res => res.json())
            .then(resp => {
                if(!resp.status) {
                    Toastify({
                    text: resp.message,
                    duration: 3000,
                    }).showToast();
                    return;
                }
                
                window.socket.volatile.emit("chat:send:image", {
                    userId: currentId,
                    type: 'image',
                    image: resp.image
                }, (data) => {
                    append_message('send', currentId, resp.image, data.image, 'image')
                    input_msg.value = '';
                    var msg_box = document.getElementById('chat-messages');
                    msg_box.scrollTo(0, msg_box.scrollHeight);
                });
                
            })
        })

        file_el_other.addEventListener('change', (e) => {
            var img = e.target.files[0];

            var form_data = new FormData();
            form_data.append('file', img);
            fetch('/api/file-upload', {method: "POST", body: form_data})
            .then(res => res.json())
            .then(resp => {
                if(!resp.status) {
                    Toastify({
                    text: resp.message,
                    duration: 3000,
                    }).showToast();
                    return;
                }
                
                window.socket.volatile.emit("chat:send:file", {
                    userId: currentId,
                    type: 'file',
                    file: resp.image
                }, (data) => {
                    append_message('send', currentId, resp.image, data.image, 'file')
                    input_msg.value = '';
                    var msg_box = document.getElementById('chat-messages');
                    msg_box.scrollTo(0, msg_box.scrollHeight);
                });
                
            })
        })

        var input_msg = document.getElementById('send-message-input');
        input_msg.addEventListener('keyup', (e) => {
            if(currentId && e.keyCode == 13) {
                window.socket.volatile.emit("chat:send:message", {
                    userId: currentId,
                    message: e.target.value,
                    type: 'message'
                }, (data) => {
                    append_message('send', currentId, e.target.value, data.image)
                    input_msg.value = '';
                    var msg_box = document.getElementById('chat-messages');
                    msg_box.scrollTo(0, msg_box.scrollHeight);
                });
            }
        })
    })

    function handleErrors(err, type) {
        console.log(type, err)
        // window.location.href = '/login'
    }

    function append_user(id, name, username, image) {
        var body = `<div id="user_${id}"
        class="flex flex-row py-4 px-2 justify-center items-center border-b-2 cursor-pointer hover:opacity-90"
        onClick="getUserChat('${id}')"
        >
        <div class="w-1/4">
        <img
            src="/${image}"
            class="object-cover h-12 w-12 rounded-full"
            alt=""
        />
        </div>
        <div class="w-full">
        <div class="text-lg font-semibold">${name}</div>
        <span class="text-gray-500">@${username}</span>
        </div>
        <div class="w-1/4">
        <div class="h-2 w-2 rounded-full" id="online_${id}"></div>
        <button
    id="video_call_button1"
    class="hidden bg-title text-white active:bg-pink-600 font-bold uppercase text-sm px-6 py-3 rounded shadow hover:shadow-lg outline-none focus:outline-none mr-1 mb-1 ease-linear transition-all duration-150" type="button" onclick="toggleModal('modal-id')">
        V
    </button>
        </div>
        </div>`

        document.getElementById('chat-users').insertAdjacentHTML('beforeend', body);
    }

    function append_message(type, id, message, image, m_type = "message") {
        var body = '';
        if(type == 'send') {
            if(m_type == "message") {
                body = `<div class="flex justify-end mb-4" id="${id}">
                <div
                class="mr-2 py-3 px-4 bg-title rounded-bl-3xl rounded-tl-3xl rounded-tr-xl text-desc"
                >
                ${message}
                </div>
                <img
                src="/${image}"
                class="object-cover h-8 w-8 rounded-full"
                alt=""
                />
                </div>`;
            }
            else if(m_type == "image") {
                body = `<div class="flex justify-end mb-4" id="${id}">
                <div
                class="mr-2 py-3 px-4 bg-title rounded-bl-3xl rounded-tl-3xl rounded-tr-xl text-desc"
                >
                    <img
                    src="/${message}"
                    class="object-cover h-20 w-20 rounded"
                    alt=""
                    />
                </div>
                <img
                src="/${image}"
                class="object-cover h-8 w-8 rounded-full"
                alt=""
                />
                </div>`;
            }
            else {
                body = `<div class="flex justify-end mb-4" id="${id}">
                <div
                class="mr-2 py-3 px-4 bg-title rounded-bl-3xl rounded-tl-3xl rounded-tr-xl text-desc"
                >
                    <a href="/${message}" target="_blank" style="color: blue;">${message.replace('/', '')}</a>
                </div>
                <img
                src="/${image}"
                class="object-cover h-8 w-8 rounded-full"
                alt=""
                />
                </div>`;
            }
        }
        else {
            if(m_type == "message") {
                body = `<div class="flex justify-start mb-4" id="${id}">
                    <img
                    src="/${image}"
                    class="object-cover h-8 w-8 rounded-full"
                    alt=""
                    />
                    <div
                    class="ml-2 py-3 px-4 bg-gray-400 rounded-br-3xl rounded-tr-3xl rounded-tl-xl text-white"
                    >
                    ${message}
                    </div>
                </div>`;
            }
            else if(m_type == "image") {
                body = `<div class="flex justify-start mb-4" id="${id}">
                    <img
                    src="/${image}"
                    class="object-cover h-8 w-8 rounded-full"
                    alt=""
                    />
                    <div
                    class="ml-2 py-3 px-4 bg-gray-400 rounded-br-3xl rounded-tr-3xl rounded-tl-xl text-white"
                    >
                        <img
                        src="/${message}"
                        class="object-cover h-20 w-20 rounded"
                        alt=""
                        />
                    </div>
                </div>`;
            }
            else {
                body = `<div class="flex justify-start mb-4" id="${id}">
                    <img
                    src="/${image}"
                    class="object-cover h-8 w-8 rounded-full"
                    alt=""
                    />
                    <div
                    class="ml-2 py-3 px-4 bg-gray-400 rounded-br-3xl rounded-tr-3xl rounded-tl-xl text-white"
                    >
                        <a href="/${message}" target="_blank" style="color: blue;">${message.replace('/', '')}</a>
                    </div>
                </div>`;
            }
            
        }

        
      document.getElementById('chat-messages').insertAdjacentHTML('beforeend', body);
    }

    function profile_body(name, username, image, createdAt) {
        var body = `<div class="flex flex-col mt-2">
        <div class="font-semibold text-xl">${name}</div>
        <div class="font-light text-gray-300 pb-4">
            @${username}
        </div>
        <img
            src="/${image}"
            class="object-cover rounded-xl h-64"
            alt=""
        />
        <div class="font-semibold py-4">Created ${new Date(createdAt).toUTCString()}</div>
        </div>`;
      document.getElementById('user-profile').innerHTML = body;
    }

    function getUserChat(id) {
        if(currentId == id) return;
        if(currentId) {
            var old_active_user = document.getElementById('user_' + currentId);
            old_active_user.classList.remove('border-l-4')
            old_active_user.classList.remove('border-title')
            // var _old_video_btn_el =  document.getElementById('video_call_button_' + currentId);
            // if(!_old_video_btn_el.classList.contains('hidden')) {
            //     _old_video_btn_el && _old_video_btn_el.classList.add('hidden')
            // }
        }

        var _user = online_user_list.find(u => u.userId.toLowerCase() == id.toLowerCase())
        if(_user) {
            (video_btn_el.classList.contains('hidden')) && video_btn_el.classList.remove('hidden')
            video_btn_el.setAttribute('userId', id)
        }
        else {
            (!video_btn_el.classList.contains('hidden')) && video_btn_el.classList.add('hidden')
        }

        var active_user = document.getElementById('user_' + id);
        active_user.classList.add('border-l-4')
        active_user.classList.add('border-title')
    
        currentId = id;
        img_upload_btn.classList.remove('hidden');
        file_upload_btn.classList.remove('hidden');
        var msg_box = document.getElementById('chat-messages');
        msg_box.innerHTML = '';
        window.socket.emit("user:chat", id, (chat) => {
            chat.forEach(c => {
                var type = id == c.userId_1 ? 'receive' : 'send';
                // if(c.message_type == 'message') {
                //     append_message(type, c._id, c.message, c.image);
                // }
                append_message(type, c._id, c.message, c.image, c.message_type);
            });
            setTimeout(() => {
                msg_box.scrollTo(0, msg_box.scrollHeight);
                new Viewer(document.getElementById('chat-messages'))
                // document.querySelectorAll('img').forEach(el => {
                //     new Viewer(el)
                // })
            }, 50);
        });
    }

    function toggleModal(modalID){
        isModalOpen = !isModalOpen;
        document.getElementById(modalID).classList.toggle("hidden");
        document.getElementById(modalID + "-backdrop").classList.toggle("hidden");
        //   document.getElementById(modalID).classList.toggle("flex");
        //   document.getElementById(modalID + "-backdrop").classList.toggle("flex");
        if(myCall) {
            myCall.close();
            myCall = null;
        }
    }

    function makeCall() {
        var _userId = video_btn_el.getAttribute('userId');
        if(!_userId) return;

        window.socket.emit('get:peer:id', _userId, (_peerId) => {
            console.log('_peerId', _peerId);
            alert('_peerId, ' + _peerId);
            var _video = document.createElement('video');

            if(!_peerId) return;
            getUserMedia({video: true, audio: true}, function(stream) {
                addVideoStream(video_el, stream)
                myStream = stream;
                console.log('send call', _peerId)
                var call = peer.call(_peerId, stream);
                myCall = call;
                call.on('stream', function(remoteStream) {
                    // Show stream in some video/canvas element.
                    addVideoStream(_video, remoteStream)
                    peers[_userId] = call;
                    close_call_btn.setAttribute('userId', _userId);
                });

                call.on('close', () => {
                    _video.remove();
                    video_el.remove();
                    call.close();
                });
            }, function(err) {
                console.log('Failed to get local stream 1' ,err);
            });
        })

        
    }

    peer.on('call', function(call) {
        console.log('receive call', call)

        // var isReceive = confirm('Do you want to receive the call?');
        // if(!isReceive) return;
        var _video = document.createElement('video');
        getUserMedia({video: true, audio: true}, function(stream) {
            if(!isModalOpen) {
                // isModalOpen = true
                toggleModal('modal-id');
            }
            call.answer(stream); // Answer the call with an A/V stream.
            addVideoStream(video_el, stream)
            call.on('stream', function(remoteStream) {
                // Show stream in some video/canvas element.
                addVideoStream(_video, remoteStream)
            });

            call.on('close', () => {
                _video.remove();
                video_el.remove();
                call.close();
            });
        }, function(err) {
            console.log('Failed to get local stream 2' ,err);
        });
    });

    peer.on('open', (id) => {
        console.log('peer open', id);
        setTimeout(() => {
            window.socket.emit('user-peerId-update', id);
        }, 3000);
    });

    const addVideoStream = (video, stream) => {
        video.srcObject = stream;
        video.addEventListener('loadedmetadata', () => {
            video.play();
            videoGrid.append(video);
        });
    };
</script>
</html>